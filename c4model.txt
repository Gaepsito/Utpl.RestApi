workspace "Empresa de Renta de Autos para Conductores de Uber" {

    !identifiers hierarchical
    
    description "Diagrama de interacción de componentes para una empresa de renta de autos para conductores de Uber"
    
    model {
        pDriver = person "Conductor de Uber"
        pAdmin = person "Administrador de la Plataforma"
        sRentalSystem = softwareSystem "Sistema de Gestión de Renta de Autos" {
            
            portalManagement = container "Portal de Gestión" {
                tags "Portal"
                technology "SPA Angular 16"
                description "Aplicaciones para la administración de la plataforma de renta de autos"
                webComponent = component "Web de Administración" "Sitio web para administrar la plataforma" "Compatibilidad con navegadores web"
                appComponent = component "App de Administración" "App móvil para administrar la plataforma" "APP para Android e iOS"
            }
            
            portalBooking = container "Portal de Reservas" {
                tags "Portal"
                technology "SPA Angular 16"
                description "Aplicaciones para realizar reservas de autos"
                webComponent = component "Web de Reservas" "Sitio web para reservar autos" "Web para PC/Laptop"
                appComponent = component "App de Reservas" "App móvil para reservar autos" "Aplicación para celular/tablet"
            }
            
            apiInventory = container "API de Inventario" {
                tags "API"
                technology "Python 3"
                description "API REST para la consulta y actualización de información de inventario a la base de datos"
                securityComponent = component "Componente de Seguridad" "Establece el cifrado entre las bases durante los procesos del API" "Fast Security / Python 3"
            }
            
            apiBookings = container "API de Reservas" {
                tags "API"
                technology "Python 3"
                description "API REST para la consulta y actualización de información de reservas a la base de datos"
                securityComponent = component "Componente de Seguridad" "Establece el cifrado entre las bases durante los procesos del API" "Fast Security / Python 3"
            }
            
            apiUsers = container "API de Usuarios" {
                tags "API"
                technology "Python 3"
                description "API REST para la consulta y actualización de información de usuarios a la base de datos"
                securityComponent = component "Componente de Seguridad" "Establece el cifrado entre las bases durante los procesos del API" "Fast Security / Python 3"
            }
            
            db = container "Base de Datos" {
                tags "Database"
                technology "MySQL"
                description "Base de datos para almacenar información de la plataforma"
            }
        }
        
        pDriver -> portalBooking.webComponent "Realiza reservas"
        pDriver -> portalBooking.appComponent "Realiza reservas"
        pAdmin -> portalManagement.webComponent "Administra la plataforma"
        pAdmin -> portalManagement.appComponent "Administra la plataforma"
        portalBooking.webComponent -> apiInventory "Consulta y actualiza inventario"
        portalBooking.appComponent -> apiInventory "Consulta y actualiza inventario"
        portalBooking.webComponent -> apiBookings "Consulta y actualiza reservas"
        portalBooking.appComponent -> apiBookings "Consulta y actualiza reservas"
        portalManagement.webComponent -> apiUsers "Consulta y actualiza usuarios"
        portalManagement.appComponent -> apiUsers "Consulta y actualiza usuarios"
        apiInventory -> db "Consulta y actualiza información de inventario"
        apiBookings -> db "Consulta y actualiza información de reservas"
        apiUsers -> db "Consulta y actualiza información de usuarios"
    }
    
    views {
        systemContext sRentalSystem {
            include *
            autolayout lr
            animation pDriver, pAdmin
        }
        
        container sRentalSystem {
            include *
            autolayout lr
            animation portalManagement, portalBooking, apiInventory, apiBookings, apiUsers, db
        }
        
        component portalManagement {
            include *
            autolayout lr
            animation webComponent, appComponent
        }
        
        component portalBooking {
            include *
            autolayout lr
            animation webComponent, appComponent
        }
        
        theme default
    }
    
    styles {
        element "Portal" {
            background #1168bd
            color #ffffff
        }
        
        element "API" {
            background #08427b
            color #ffffff
        }
        
        element "Database" {
            background #f5da81
            color #000000
        }
    }
}
